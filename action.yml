name: decryptedappstore-action
author: level3tjg
description: Download decrypted IPA from https://armconverter.com/decryptedappstore
inputs:
  appstore_url:
    description: AppStore URL for the app you want to download
    required: true
    type: string
  cache:
    description: Cache downloaded IPAs
    default: true
    type: boolean
  path:
    description: Path to download the ipa to
    type: string
  token:
    description: Your decryptedappstore session token
    required: true
    type: string
  version:
    description: Version of the app to download
    default: latest-available
    type: string
outputs:
  bundle-id:
    description: "Bundle ID of the downloaded app"
    value: "${{ steps.app-info.outputs.bundle-id }}"
  version:
    description: "Version string of the downloaded app"
    value: "${{ steps.get-token.outputs.version }}"

runs:
  using: composite
  steps:
    - name: Install dependencies (macOS)
      if: ${{ runner.os == 'macOS' }}
      shell: bash
      run: brew install jq

    - name: Install dependencies (Linux)
      if: ${{ runner.os == 'Linux' }}
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y jq libxml2-utils
      env:
        DEBIAN_FRONTEND: noninteractive

    - name: Get app info
      id: app-info
      shell: bash
      run: |
        appstore_url="${{ inputs.appstore_url }}"
        echo "appstore-id=$(echo ${appstore_url##*/} | cut -c 3-)" >> "$GITHUB_OUTPUT"
        echo "bundle-id=$(curl -s "${{ inputs.appstore_url }}" | xmllint --html --xpath "string(//script[@id=\"shoebox-media-api-cache-apps\"])" - 2> /dev/null | jq -r ".[] | fromjson | .d[0].attributes.platformAttributes.ios.bundleId")" >> "$GITHUB_OUTPUT"

    - name: Get download token
      id: get-token
      shell: bash
      run: |
        appstore_id=${{ steps.app-info.outputs.appstore-id }}
        bundle_id=${{ steps.app-info.outputs.bundle-id }}
        versions=$(curl -s -X POST --cookie "session=${{ inputs.token }}" "https://armconverter.com/decryptedappstore/versions/$appstore_id/0?country=us" | jq .versions)
        available_and_exists() {
          info_url="https://armconverter.com/decryptedappstore/download/$appstore_id/$bundle_id/$(echo "$1" | jq -r .ver)/info"
          info=$(curl -s --cookie "session=${{ inputs.token }}" -H "Referer: https://armconverter.com/decryptedappstore" $info_url)
          if [[ $(echo $1 | jq -r .exists) == 'true' && $(echo $info | jq -r .available) == 'true' ]]; then
            echo true
          else
            echo false
          fi
        }
        get_token() {
          if [[ $(available_and_exists "$1") == 'true' ]]; then
            prepare=$(curl -s -X POST --cookie "session=${{ inputs.token }}" -H "Referer: https://armconverter.com/decryptedappstore" "https://armconverter.com/decryptedappstore/download/$appstore_id/$bundle_id/$(echo $1 | jq -r .ver)/prepare")
            error=$(echo $prepare | jq -r .error)
            token=$(echo $prepare | jq -r .token)
            if [[ ! -z $error && $error != 'null' ]]; then
              echo 'null'
              return 0
            fi
            if [[ ! -z $token && token != 'null' ]]; then
              echo $token
              return 0
            fi
          fi
          echo 'null'
        }
        if [[ ${{ inputs.version }} == latest* ]]; then
          version=$(echo $versions | jq ".[-1]")
        else
          for ((i = 0; i < $(echo $versions | jq length); i++)); do
            version=$(echo $versions | jq ".[-$i]")
            if [[ $(echo $version | jq -r .ver) == ${{ inputs.version}} ]]; then
              break
            fi
          done
          if [[ $(echo $version | jq -r .ver) != ${{ inputs.version }} ]]; then
            "Version ${{ inputs.version }} not found"
          fi
        fi
        token=$(get_token "$version")
        if [[ $token == 'null' ]]; then
          if [[ ${{ inputs.version }} != 'latest-available' ]]; then
            echo "Version $(echo $version | jq -r .ver) is not available"
            exit 1
          fi
          for ((i = 1; i < $(echo $versions | jq length); i++)); do
            version=$(echo $versions | jq ".[-$i]")
            if [[ $(echo $version | jq -r .ver) == '' ]]; then
              continue
            fi
            token=$(get_token "$version")
            if [[ $token != 'null' ]]; then
              break
            fi
          done
        fi
        echo $(echo $version | jq -r .ver)
        if [[ $token == 'null' ]]; then
          echo "Failed to get download token"
          exit 1
        fi
        echo "token=$token" >> "$GITHUB_OUTPUT"
        echo "version=$(echo $version | jq -r .ver)" >> "$GITHUB_OUTPUT"

    - name: Cache IPA
      id: cache-ipa
      if: ${{ inputs.path != '' && inputs.cache == 'true' }}
      uses: actions/cache@v4
      with:
        path: ${{ inputs.path }}
        key: ${{ steps.app-info.outputs.bundle-id }}-${{ steps.get-token.outputs.version }}-IPA

    - name: Download IPA
      if: ${{ inputs.path != '' && steps.cache-ipa.outputs.cache-hit != 'true' }}
      shell: bash
      run: |
        curl -s -o "${{ inputs.path }}" "https://armconverter.com/decryptedappstore/download/${{ steps.app-info.outputs.appstore-id }}/${{ steps.app-info.outputs.bundle-id }}/${{ steps.get-token.outputs.version }}?token=${{ steps.get-token.outputs.token }}"
        zip -T "${{ inputs.path }}"
        if [[ $? != 0 ]]; then
          echo "Failed to download IPA"
          exit 1
        fi
